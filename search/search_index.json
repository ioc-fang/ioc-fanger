{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IOC Fanger","text":"<p>Welcome to the documentation for the <code>ioc-fanger</code> package! This documentation is interactive so you can learn and explore the package live.</p>"},{"location":"#overview","title":"Overview","text":"<p>Basically, this package can fang and defang indicators of compromise (a.k.a observables).</p> <p>Defanging (e.g. <code>example.com =&gt; example[.]com</code>) converts indicators of compromise from their normal form (in which they may become links to malicious content) to a form which cannot accidentally become a link.</p> <p>Fanging (e.g. <code>example[.]com =&gt; example.com</code>) is the opposite process which converts indicators of compromise from a defanged form to the normal, original form.</p> <p>Check out the tests to see what this package can fang/defang.</p>"},{"location":"#use-the-package-live","title":"Use the Package (LIVE!)","text":"<p>Copy this example and paste it in the terminal below to get an idea of what this package does:</p> <pre><code>import ioc_fanger\n\nioc_fanger.fang(\"example[.]com hXXp://bad[.]com/phishing[.]php\")\nioc_fanger.defang(\"example.com http://bad.com/phishing.php\")\n</code></pre> <p>This terminal uses Pyodide to provide a Python3.9 runtime in the browser using WebAssembly. Enjoy!</p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you have any ideas to improve this package, please raise an issue!</p>"},{"location":"#other-helpful-projects","title":"Other Helpful Projects","text":"<p>If you are working with indicators of compromise (a.k.a. observables), you may find the ioc-finder project helpful. The ioc-finder project parses indicators of compromise from text (using grammars).</p>"},{"location":"#credits","title":"Credits","text":"<p>We created this package using Cookiecutter and the fhightower/python-project-template project template.</p>"},{"location":"local-dev/","title":"Local Development","text":""},{"location":"local-dev/#development","title":"Development","text":"<p>\ud83d\udc4b \u00a0If you want to contribute to this project, test it locally, or just explore it - we have some helpful instructions below.</p>"},{"location":"local-dev/#prerequisites","title":"Prerequisites","text":"<p>If you want to test, lint, or explore ioc-fanger, make sure you have docker and docker-compose installed (if you don't see: installing docker).</p> <p>Then you can use the test, lint, and dev docker compose services listed below!</p>"},{"location":"local-dev/#test-ioc-fanger","title":"Test ioc-fanger \ud83e\uddea","text":"<p>To test ioc-fanger, run the following command from the root directory of the project:</p> <pre><code>docker-compose run --rm test\n</code></pre> <p>Typically, this command will run pytest on the project's test suite. To view the details of what this command does, take a look at the <code>test</code> service in the project's <code>docker-compose.yml</code> file.</p>"},{"location":"local-dev/#lint-ioc-fanger","title":"Lint ioc-fanger \ud83e\uddf9","text":"<p>To lint ioc-fanger, run the following command from the root directory of the project:</p> <pre><code>docker-compose run --rm lint\n</code></pre> <p>Typically, this command will run linters on the project's code with the goal of improving code quality and catching bugs before we release them (you can read more about the benefits of linting here). To view the details of what this command does, take a look at the <code>lint</code> service in the project's <code>docker-compose.yml</code> file.</p>"},{"location":"local-dev/#explore-ioc-fanger","title":"Explore ioc-fanger \ud83d\udd2d","text":"<p>To explore ioc-fanger, you can drop into a \"dev\" environment which is an IPython shell with the project and all its requirements loaded. To do this, run the following command from the root directory of the project:</p> <pre><code>docker-compose run --rm dev\n</code></pre> <p>To see what this command does, take a look at the <code>dev</code> service in the project's <code>docker-compose.yml</code> file.</p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"quick-start/#installation","title":"Installation","text":"<p>The recommended means of installation is using pip:</p> <p><code>pip install ioc-fanger</code></p> <p>Alternatively, you can install ioc-fanger as follows:</p> <pre><code>git clone https://github.com/ioc-fang/ioc_fanger.git &amp;&amp; cd ioc_fanger;\npython setup.py install --user;\n</code></pre>"},{"location":"quick-start/#usage","title":"Usage","text":""},{"location":"quick-start/#via-python","title":"Via Python","text":"<p>Use ioc-fanger as follows:</p> <pre><code>import ioc_fanger\n\nioc_fanger.defang(\"example.com http://bad.com/phishing.php\")  # example[.]com hXXp://bad[.]com/phishing[.]php\nioc_fanger.fang(\"example[.]com hXXp://bad[.]com/phishing[.]php\")  # example.com http://bad.com/phishing.php\n</code></pre> <p>(you can test this in the browser here)</p>"},{"location":"quick-start/#via-command-line","title":"Via Command Line","text":"<p>Once you install the package, there will be two commands available in the command line:</p> <ul> <li><code>fang</code></li> <li><code>defang</code></li> </ul> <p>After each command, provide the text you would like to fang/defang:</p> <pre><code>fang \"example[.]com\"  # example.com\n</code></pre> <pre><code>defang \"example.com\"  # example[.]com\n</code></pre>"}]}